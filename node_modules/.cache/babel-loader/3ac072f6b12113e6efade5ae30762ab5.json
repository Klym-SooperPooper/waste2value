{"remainingRequest":"C:\\APPS\\beeko\\node_modules\\thread-loader\\dist\\cjs.js!C:\\APPS\\beeko\\node_modules\\babel-loader\\lib\\index.js!C:\\APPS\\beeko\\node_modules\\vuetify-loader\\lib\\loader.js!C:\\APPS\\beeko\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\APPS\\beeko\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\APPS\\beeko\\src\\components\\qr.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\APPS\\beeko\\src\\components\\qr.vue","mtime":1605567436791},{"path":"C:\\APPS\\beeko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\APPS\\beeko\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\APPS\\beeko\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\APPS\\beeko\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1567240334000},{"path":"C:\\APPS\\beeko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\APPS\\beeko\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["qr.vue"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\n<template>\n  <v-container>\n    <v-layout\n      text-center\n      wrap\n    >\n      <v-flex xs12>\n        <v-img\n          :src=\"require('../assets/logo2.png')\"\n          class=\"my-3\"\n          contain\n          height=\"180\"\n        ></v-img>\n      </v-flex>\n\n      <v-flex mb-4>\n        <div v-if=\"qrseen\">\n          <v-alert color=\"orange lighten-2\" style=\"padding-top:7px\"><v-icon>mdi-qrcode-scan</v-icon>Наведіть на екран на контейнері для автоматичного сканування</v-alert>\n          <qrcode-stream @decode=\"onDecode\" @init=\"onInit\" height=\"100\"></qrcode-stream>\n        </div>\n        <v-btn v-if=\"!qrseen\" v-on:click=\"qrseen = !qrseen\" x-large color=\"success\" dark>Сканувати QR-код</v-btn>\n        </v-flex>\n     </v-layout>\n  </v-container>\n</template>\n\n<script>\n\nexport default {\n  data: () => ({\n    qrseen:false\n  }),\n  mounted (){\n    \n    /*var qr = this.$qrcode(0, 'H');\n    var transaction = {binid:1, count:1,  time:Date. now()};\n    //var transfer = {fromid:1, tokens:1,  time:Date. now()};\n    transaction = JSON.stringify(transaction);\n    //eslint-disable-next-line no-console\n    console.log(transaction);\n    qr.addData(this.$encryptor.encrypt(JSON.stringify(transaction)));\n    qr.make();\n    document.getElementById('placeHolder').innerHTML = qr.createImgTag();*/\n   \n     document.addEventListener('deviceready', () => {\n      alert(this.$vuecordova.plugins.permissions);\n      console.log('Cordova : device is ready !');\n    });\n  },\n  methods: {\n      //camera QR init\n      async onInit (promise) {\n      // show loading indicator\n\n      try {\n        const { capabilities } = await promise\n        console.log(capabilities);\n        // successfully initialized\n      } catch (error) {\n        alert(error.name);\n        if (error.name === 'NotAllowedError') {\n          // user denied camera access permisson\n        } else if (error.name === 'NotFoundError') {\n          // no suitable camera device installed\n        } else if (error.name === 'NotSupportedError') {\n          // page is not served over HTTPS (or localhost)\n        } else if (error.name === 'NotReadableError') {\n          // maybe camera is already in use\n        } else if (error.name === 'OverconstrainedError') {\n          // did you requested the front camera although there is none?\n        } else if (error.name === 'StreamApiNotSupportedError') {\n          // browser seems to be lacking features\n        }\n      } finally {\n        // hide loading indicator\n      }\n    },\n     IsJsonString(str) {\n        try {\n           //eslint-disable-next-line\n            console.log('try str => '+str);\n            return JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n    },\n    onDecode (decodedString) {\n      if(decodedString){\n        //this.$router.push('Wallet')\n        //var decrypted = this.$encryptor.decrypt(decodedString);\n        //eslint-disable-next-line\n        decodedString = this.IsJsonString(decodedString);\n        let router = this.$router;\n        let db = this.$store.state.db;\n        let ref = this;\n        //eslint-disable-next-line\n        let getUserDocRef = db.collection('users').doc(this.$firebase.auth().currentUser.uid);\n\n        if(typeof decodedString === 'object'){\n          //lottery\n          if(typeof decodedString.t !== 'undefined'){\n             db.collection(\"qr\")\n            .where(\"t\", \"==\", decodedString.t)\n            .where(\"activated\", \"==\", false)\n            .get().then(\n              function(querySnapshot) {\n                querySnapshot.forEach(function(doc) {\n                  db.collection('qr').doc(doc.id).update({'uid':ref.$firebase.auth().currentUser.uid, 'activated':true})\n                  .then(\n                    ()=>{\n                      alert('QR active user is updated!');\n                      decodedString = {'binid':1, 'bonus':ref.$bonusRate, 'bonusRate':ref.$bonusRate, 'count':1, 'rate':ref.$rate, 'tokens':ref.$rate, 'uid':ref.$firebase.auth().currentUser.uid, 'time':Date.now().toString()};\n                      db.collection(\"transactions\").add(decodedString)\n                      .then(function(docRef) {\n                          //eslint-disable-next-line no-console\n                          console.log(\"Transaction written with ID: \", docRef.id);\n                          //run TRANSFER USER transaction\n                          return db.runTransaction(function(transaction) {\n                              // This code may get re-run multiple times if there are conflicts.\n                              //eslint-disable-next-line\n                              return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                                  if (!getUserDoc.exists) {\n                                      throw \"Document does not exist!\";\n                                  }\n                                  var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                                  var newBonus = getUserDoc.data().bonus + decodedString.bonus;\n                                  //eslint-disable-next-line\n                                  transaction.update(getUserDocRef, { tokens: newTokens, bonus: newBonus});\n                                  console.log(\"user \"+getUserDoc.id+\" played lottery for the amount of \"+newTokens+\" tokens\");\n                              });\n                          }).then(function() {\n                              console.log(\"Lottery user transaction successfully committed!\");\n                              //run transaction for transfer user\n                              //eslint-disable-next-line\n                              router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                          }).catch(function(error) {\n                              console.log(\"Transaction failed: \", error);\n                          });\n                      })\n                      .catch(function(error) {\n                        //eslint-disable-next-line no-console\n                          console.error(\"Error adding document: \", error);\n                      });\n                    }\n                  );\n                });\n            });\n          }\n          //transfer or vending machine generation\n          //TRANSFER\n          else if(typeof decodedString.tokens !== 'undefined'){\n            //alert('Get your '+decodedString.tokens+' tokens from '+decodedString.fromid+' !');\n            //add owner of transaction\n            decodedString.uid = this.$firebase.auth().currentUser.uid;\n            //eslint-disable-next-line\n            let getTransferUserDocRef = db.collection('users').doc(decodedString.fromid.toString());\n            //make sure we get a number of tokens\n            decodedString.tokens = parseInt(decodedString.tokens);\n            db.collection(\"transactions\").add(decodedString)\n            .then(function(docRef) {\n               //eslint-disable-next-line no-console\n                console.log(\"Transaction written with ID: \", docRef.id);\n                \n                //run OWNER USER transaction\n                return db.runTransaction(function(transaction) {\n                    // This code may get re-run multiple times if there are conflicts.\n                    //eslint-disable-next-line\n                    return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                        if (!getUserDoc.exists) {\n                            throw \"Document does not exist!\";\n                        }\n                        var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                        //eslint-disable-next-line\n                        transaction.update(getUserDocRef, { tokens: newTokens });\n                        console.log(\"user \"+getUserDoc.id+\" got \"+newTokens+\" tokens\");\n                    });\n                }).then(function() {\n                    console.log(\"Get user transaction successfully committed!\");\n                     //run TRANSFER USER transaction\n                    return db.runTransaction(function(transaction) {\n                        // This code may get re-run multiple times if there are conflicts.\n                        //eslint-disable-next-line\n                        return transaction.get(getTransferUserDocRef).then(function(getTransferUserDoc) {\n                            if (!getTransferUserDoc.exists) {\n                                throw \"Document does not exist!\";\n                            }\n                            var newTokens = getTransferUserDoc.data().tokens - decodedString.tokens;\n                            //eslint-disable-next-line\n                            transaction.update(getTransferUserDocRef, { tokens: newTokens });\n                            console.log(\"user \"+getTransferUserDoc.id+\" transferred \"+newTokens+\" tokens\");\n                        });\n                    }).then(function() {\n                        console.log(\"Transfer user transaction successfully committed!\");\n                        //run transaction for transfer user\n                        router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                    }).catch(function(error) {\n                        console.log(\"Transaction failed: \", error);\n                    });\n                }).catch(function(error) {\n                    console.log(\"Transaction failed: \", error);\n                });\n            })\n            .catch(function(error) {\n              //eslint-disable-next-line no-console\n                console.error(\"Error adding document: \", error);\n            });\n           //RECYCLE transaction \n          } else if(typeof decodedString.count !=='undefined'){\n            //let recycleTime = new Date(decodedString.time);\n            // alert('Thanks for '+decodedString.count+' '+recycleTime.getDate()+' '+(recycleTime.getMonth()+1)+' '+recycleTime.getFullYear());\n            //eslint-disable-next-line\n            let getUserDocRef = db.collection('users').doc(this.$firebase.auth().currentUser.uid);\n            //add owner of transaction\n            decodedString.uid = this.$firebase.auth().currentUser.uid;\n            //calc rates\n            decodedString.tokens = this.$rate*decodedString.count;\n            decodedString.rate = this.$rate;\n            //calc bonuses\n            decodedString.bonus = this.$bonusRate*decodedString.count;\n            decodedString.bonusRate = this.$bonusRate;\n            db.collection(\"transactions\").add(decodedString)\n            .then(function(docRef) {\n               //eslint-disable-next-line no-console\n                console.log(\"Transaction written with ID: \", docRef.id);\n                      //run TRANSFER USER transaction\n                return db.runTransaction(function(transaction) {\n                    // This code may get re-run multiple times if there are conflicts.\n                    //eslint-disable-next-line\n                    return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                        if (!getUserDoc.exists) {\n                            throw \"Document does not exist!\";\n                        }\n                        var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                        var newBonus = getUserDoc.data().bonus + decodedString.bonus;\n                        //eslint-disable-next-line\n                        transaction.update(getUserDocRef, { tokens: newTokens, bonus: newBonus});\n                        console.log(\"user \"+getUserDoc.id+\" recycled for the amount of \"+newTokens+\" tokens\");\n                    });\n                }).then(function() {\n                    console.log(\"Recycling user transaction successfully committed!\");\n                    //run transaction for transfer user\n                    //eslint-disable-next-line\n                    router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                }).catch(function(error) {\n                    console.log(\"Transaction failed: \", error);\n                });\n            })\n            .catch(function(error) {\n              //eslint-disable-next-line no-console\n                console.error(\"Error adding document: \", error);\n            });\n          } else if(typeof decodedString.active !=='undefined'){\n            alert(decodedString);\n            db.collection('bin_users')\n            .where('datetime','==',decodedString.datetime)\n            .where('pending','==',true)\n            .where('binid','==',decodedString.binid)\n            .get().then(function(querySnapshot) {\n              if(querySnapshot.exists){\n                querySnapshot.forEach(function(doc) {\n                  db.collection('bin_users').doc(doc.id).update({'pending':false, 'active':true,'uid':ref.$firebase.auth().currentUser.uid});\n                  alert('active user is updated!');\n                });\n              } else {\n                alert(\"Error getting active doc\");\n              }\n            }).catch(function(error) {\n                alert(error);\n                console.log(\"Error getting active => \", error);\n            });\n          } else {\n            alert('QR error');\n          }\n        } else {\n          alert('QR error');\n        }\n      }\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/components"}]}