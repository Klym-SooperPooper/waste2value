{"remainingRequest":"D:\\beeko\\node_modules\\babel-loader\\lib\\index.js!D:\\beeko\\node_modules\\vuetify-loader\\lib\\loader.js!D:\\beeko\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\beeko\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\beeko\\src\\components\\qr.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\beeko\\src\\components\\qr.vue","mtime":1589105769708},{"path":"D:\\beeko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\beeko\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\beeko\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1567240333000},{"path":"D:\\beeko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\beeko\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["qr.vue"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\n<template>\n  <v-container>\n    <v-layout\n      text-center\n      wrap\n    >\n      <v-flex xs12>\n        <v-img\n          :src=\"require('../assets/logo.png')\"\n          class=\"my-3\"\n          contain\n          height=\"60\"\n        ></v-img>\n      </v-flex>\n\n      <v-flex mb-4>\n        <div v-if=\"qrseen\">\n          <v-alert color=\"orange lighten-2\" style=\"padding-top:7px\"><v-icon>mdi-qrcode-scan</v-icon>Наведіть на екран на контейнері для автоматичного сканування</v-alert>\n          <qrcode-stream @decode=\"onDecode\" height=\"100\"></qrcode-stream>\n        </div>\n        <v-btn v-if=\"!qrseen\" v-on:click=\"qrseen = !qrseen\" x-large color=\"success\" dark>Сканувати QR-код</v-btn>\n        </v-flex>\n     </v-layout>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data: () => ({\n    qrseen:false\n  }),\n  mounted (){\n    /*var qr = this.$qrcode(0, 'H');\n    var transaction = {binid:1, count:1,  time:Date. now()};\n    var transfer = {fromid:1, tokens:1,  time:Date. now()};\n    transaction = JSON.stringify(transaction);\n    //eslint-disable-next-line no-console\n    console.log(transaction);\n    qr.addData(this.$encryptor.encrypt(JSON.stringify(transaction)));\n    qr.make();\n    document.getElementById('placeHolder').innerHTML = qr.createImgTag();*/\n  },\n  methods: {\n     IsJsonString(str) {\n        try {\n           //eslint-disable-next-line\n            console.log('try str => '+str);\n            return JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n    },\n    onDecode (decodedString) {\n      if(decodedString){\n        //this.$router.push('Wallet')\n        //var decrypted = this.$encryptor.decrypt(decodedString);\n        //eslint-disable-next-line\n        decodedString = this.IsJsonString(decodedString);\n        let router = this.$router;\n        let db = this.$store.state.db;\n        let ref = this;\n        if(typeof decodedString === 'object'){\n          //TRANSFER\n          if(typeof decodedString.tokens !== 'undefined'){\n            //alert('Get your '+decodedString.tokens+' tokens from '+decodedString.fromid+' !');\n            //add owner of transaction\n            decodedString.uid = this.$firebase.auth().currentUser.uid;\n            //eslint-disable-next-line\n            let getUserDocRef = db.collection('users').doc(this.$firebase.auth().currentUser.uid);\n            //eslint-disable-next-line\n            let getTransferUserDocRef = db.collection('users').doc(decodedString.fromid.toString());\n            //make sure we get a number of tokens\n            decodedString.tokens = parseInt(decodedString.tokens);\n            db.collection(\"transactions\").add(decodedString)\n            .then(function(docRef) {\n               //eslint-disable-next-line no-console\n                console.log(\"Transaction written with ID: \", docRef.id);\n                \n                //run OWNER USER transaction\n                return db.runTransaction(function(transaction) {\n                    // This code may get re-run multiple times if there are conflicts.\n                    //eslint-disable-next-line\n                    return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                        if (!getUserDoc.exists) {\n                            throw \"Document does not exist!\";\n                        }\n                        var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                        //eslint-disable-next-line\n                        transaction.update(getUserDocRef, { tokens: newTokens });\n                        console.log(\"user \"+getUserDoc.id+\" got \"+newTokens+\" tokens\");\n                    });\n                }).then(function() {\n                    console.log(\"Get user transaction successfully committed!\");\n                     //run TRANSFER USER transaction\n                    return db.runTransaction(function(transaction) {\n                        // This code may get re-run multiple times if there are conflicts.\n                        //eslint-disable-next-line\n                        return transaction.get(getTransferUserDocRef).then(function(getTransferUserDoc) {\n                            if (!getTransferUserDoc.exists) {\n                                throw \"Document does not exist!\";\n                            }\n                            var newTokens = getTransferUserDoc.data().tokens - decodedString.tokens;\n                            //eslint-disable-next-line\n                            transaction.update(getTransferUserDocRef, { tokens: newTokens });\n                            console.log(\"user \"+getTransferUserDoc.id+\" transferred \"+newTokens+\" tokens\");\n                        });\n                    }).then(function() {\n                        console.log(\"Transfer user transaction successfully committed!\");\n                        //run transaction for transfer user\n                        router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                    }).catch(function(error) {\n                        console.log(\"Transaction failed: \", error);\n                    });\n                }).catch(function(error) {\n                    console.log(\"Transaction failed: \", error);\n                });\n            })\n            .catch(function(error) {\n              //eslint-disable-next-line no-console\n                console.error(\"Error adding document: \", error);\n            });\n           //RECYCLE transaction \n          } else if(typeof decodedString.count !=='undefined'){\n            //let recycleTime = new Date(decodedString.time);\n            // alert('Thanks for '+decodedString.count+' '+recycleTime.getDate()+' '+(recycleTime.getMonth()+1)+' '+recycleTime.getFullYear());\n            //eslint-disable-next-line\n            let getUserDocRef = db.collection('users').doc(this.$firebase.auth().currentUser.uid);\n            //add owner of transaction\n            decodedString.uid = this.$firebase.auth().currentUser.uid;\n            //calc rates\n            decodedString.tokens = this.$rate*decodedString.count;\n            decodedString.rate = this.$rate;\n            //calc bonuses\n            decodedString.bonus = this.$bonusRate*decodedString.count;\n            decodedString.bonusRate = this.$bonusRate;\n            db.collection(\"transactions\").add(decodedString)\n            .then(function(docRef) {\n               //eslint-disable-next-line no-console\n                console.log(\"Transaction written with ID: \", docRef.id);\n                      //run TRANSFER USER transaction\n                return db.runTransaction(function(transaction) {\n                    // This code may get re-run multiple times if there are conflicts.\n                    //eslint-disable-next-line\n                    return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                        if (!getUserDoc.exists) {\n                            throw \"Document does not exist!\";\n                        }\n                        var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                        var newBonus = getUserDoc.data().bonus + decodedString.bonus;\n                        //eslint-disable-next-line\n                        transaction.update(getUserDocRef, { tokens: newTokens, bonus: newBonus});\n                        console.log(\"user \"+getUserDoc.id+\" recycled for the amount of \"+newTokens+\" tokens\");\n                    });\n                }).then(function() {\n                    console.log(\"Recycling user transaction successfully committed!\");\n                    //run transaction for transfer user\n                    //eslint-disable-next-line\n                    router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                }).catch(function(error) {\n                    console.log(\"Transaction failed: \", error);\n                });\n            })\n            .catch(function(error) {\n              //eslint-disable-next-line no-console\n                console.error(\"Error adding document: \", error);\n            });\n          } else if(typeof decodedString.active !=='undefined'){\n            alert(decodedString);\n            db.collection('bin_users')\n            .where('datetime','==',decodedString.datetime)\n            .where('pending','==',true)\n            .where('binid','==',decodedString.binid)\n            .get().then(function(querySnapshot) {\n              if(querySnapshot.exists){\n                querySnapshot.forEach(function(doc) {\n                  db.collection('bin_users').doc(doc.id).update({'pending':false, 'active':true,'uid':ref.$firebase.auth().currentUser.uid});\n                  alert('active user is updated!');\n                });\n              } else {\n                alert(\"Error getting active doc\");\n              }\n            }).catch(function(error) {\n                alert(error);\n                console.log(\"Error getting active => \", error);\n            });\n          } else {\n            alert('QR error');\n          }\n        } else {\n          alert('QR error');\n        }\n      }\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/components"}]}