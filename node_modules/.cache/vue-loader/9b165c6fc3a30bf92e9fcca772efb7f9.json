{"remainingRequest":"C:\\APPS\\beeko\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\APPS\\beeko\\src\\components\\qr.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\APPS\\beeko\\src\\components\\qr.vue","mtime":1605567436791},{"path":"C:\\APPS\\beeko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\APPS\\beeko\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\APPS\\beeko\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1567240334000},{"path":"C:\\APPS\\beeko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\APPS\\beeko\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["qr.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"qr.vue","sourceRoot":"src/components","sourcesContent":["/* eslint-disable */\n<template>\n  <v-container>\n    <v-layout\n      text-center\n      wrap\n    >\n      <v-flex xs12>\n        <v-img\n          :src=\"require('../assets/logo2.png')\"\n          class=\"my-3\"\n          contain\n          height=\"180\"\n        ></v-img>\n      </v-flex>\n\n      <v-flex mb-4>\n        <div v-if=\"qrseen\">\n          <v-alert color=\"orange lighten-2\" style=\"padding-top:7px\"><v-icon>mdi-qrcode-scan</v-icon>Наведіть на екран на контейнері для автоматичного сканування</v-alert>\n          <qrcode-stream @decode=\"onDecode\" @init=\"onInit\" height=\"100\"></qrcode-stream>\n        </div>\n        <v-btn v-if=\"!qrseen\" v-on:click=\"qrseen = !qrseen\" x-large color=\"success\" dark>Сканувати QR-код</v-btn>\n        </v-flex>\n     </v-layout>\n  </v-container>\n</template>\n\n<script>\n\nexport default {\n  data: () => ({\n    qrseen:false\n  }),\n  mounted (){\n    \n    /*var qr = this.$qrcode(0, 'H');\n    var transaction = {binid:1, count:1,  time:Date. now()};\n    //var transfer = {fromid:1, tokens:1,  time:Date. now()};\n    transaction = JSON.stringify(transaction);\n    //eslint-disable-next-line no-console\n    console.log(transaction);\n    qr.addData(this.$encryptor.encrypt(JSON.stringify(transaction)));\n    qr.make();\n    document.getElementById('placeHolder').innerHTML = qr.createImgTag();*/\n   \n     document.addEventListener('deviceready', () => {\n      alert(this.$vuecordova.plugins.permissions);\n      console.log('Cordova : device is ready !');\n    });\n  },\n  methods: {\n      //camera QR init\n      async onInit (promise) {\n      // show loading indicator\n\n      try {\n        const { capabilities } = await promise\n        console.log(capabilities);\n        // successfully initialized\n      } catch (error) {\n        alert(error.name);\n        if (error.name === 'NotAllowedError') {\n          // user denied camera access permisson\n        } else if (error.name === 'NotFoundError') {\n          // no suitable camera device installed\n        } else if (error.name === 'NotSupportedError') {\n          // page is not served over HTTPS (or localhost)\n        } else if (error.name === 'NotReadableError') {\n          // maybe camera is already in use\n        } else if (error.name === 'OverconstrainedError') {\n          // did you requested the front camera although there is none?\n        } else if (error.name === 'StreamApiNotSupportedError') {\n          // browser seems to be lacking features\n        }\n      } finally {\n        // hide loading indicator\n      }\n    },\n     IsJsonString(str) {\n        try {\n           //eslint-disable-next-line\n            console.log('try str => '+str);\n            return JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n    },\n    onDecode (decodedString) {\n      if(decodedString){\n        //this.$router.push('Wallet')\n        //var decrypted = this.$encryptor.decrypt(decodedString);\n        //eslint-disable-next-line\n        decodedString = this.IsJsonString(decodedString);\n        let router = this.$router;\n        let db = this.$store.state.db;\n        let ref = this;\n        //eslint-disable-next-line\n        let getUserDocRef = db.collection('users').doc(this.$firebase.auth().currentUser.uid);\n\n        if(typeof decodedString === 'object'){\n          //lottery\n          if(typeof decodedString.t !== 'undefined'){\n             db.collection(\"qr\")\n            .where(\"t\", \"==\", decodedString.t)\n            .where(\"activated\", \"==\", false)\n            .get().then(\n              function(querySnapshot) {\n                querySnapshot.forEach(function(doc) {\n                  db.collection('qr').doc(doc.id).update({'uid':ref.$firebase.auth().currentUser.uid, 'activated':true})\n                  .then(\n                    ()=>{\n                      alert('QR active user is updated!');\n                      decodedString = {'binid':1, 'bonus':ref.$bonusRate, 'bonusRate':ref.$bonusRate, 'count':1, 'rate':ref.$rate, 'tokens':ref.$rate, 'uid':ref.$firebase.auth().currentUser.uid, 'time':Date.now().toString()};\n                      db.collection(\"transactions\").add(decodedString)\n                      .then(function(docRef) {\n                          //eslint-disable-next-line no-console\n                          console.log(\"Transaction written with ID: \", docRef.id);\n                          //run TRANSFER USER transaction\n                          return db.runTransaction(function(transaction) {\n                              // This code may get re-run multiple times if there are conflicts.\n                              //eslint-disable-next-line\n                              return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                                  if (!getUserDoc.exists) {\n                                      throw \"Document does not exist!\";\n                                  }\n                                  var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                                  var newBonus = getUserDoc.data().bonus + decodedString.bonus;\n                                  //eslint-disable-next-line\n                                  transaction.update(getUserDocRef, { tokens: newTokens, bonus: newBonus});\n                                  console.log(\"user \"+getUserDoc.id+\" played lottery for the amount of \"+newTokens+\" tokens\");\n                              });\n                          }).then(function() {\n                              console.log(\"Lottery user transaction successfully committed!\");\n                              //run transaction for transfer user\n                              //eslint-disable-next-line\n                              router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                          }).catch(function(error) {\n                              console.log(\"Transaction failed: \", error);\n                          });\n                      })\n                      .catch(function(error) {\n                        //eslint-disable-next-line no-console\n                          console.error(\"Error adding document: \", error);\n                      });\n                    }\n                  );\n                });\n            });\n          }\n          //transfer or vending machine generation\n          //TRANSFER\n          else if(typeof decodedString.tokens !== 'undefined'){\n            //alert('Get your '+decodedString.tokens+' tokens from '+decodedString.fromid+' !');\n            //add owner of transaction\n            decodedString.uid = this.$firebase.auth().currentUser.uid;\n            //eslint-disable-next-line\n            let getTransferUserDocRef = db.collection('users').doc(decodedString.fromid.toString());\n            //make sure we get a number of tokens\n            decodedString.tokens = parseInt(decodedString.tokens);\n            db.collection(\"transactions\").add(decodedString)\n            .then(function(docRef) {\n               //eslint-disable-next-line no-console\n                console.log(\"Transaction written with ID: \", docRef.id);\n                \n                //run OWNER USER transaction\n                return db.runTransaction(function(transaction) {\n                    // This code may get re-run multiple times if there are conflicts.\n                    //eslint-disable-next-line\n                    return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                        if (!getUserDoc.exists) {\n                            throw \"Document does not exist!\";\n                        }\n                        var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                        //eslint-disable-next-line\n                        transaction.update(getUserDocRef, { tokens: newTokens });\n                        console.log(\"user \"+getUserDoc.id+\" got \"+newTokens+\" tokens\");\n                    });\n                }).then(function() {\n                    console.log(\"Get user transaction successfully committed!\");\n                     //run TRANSFER USER transaction\n                    return db.runTransaction(function(transaction) {\n                        // This code may get re-run multiple times if there are conflicts.\n                        //eslint-disable-next-line\n                        return transaction.get(getTransferUserDocRef).then(function(getTransferUserDoc) {\n                            if (!getTransferUserDoc.exists) {\n                                throw \"Document does not exist!\";\n                            }\n                            var newTokens = getTransferUserDoc.data().tokens - decodedString.tokens;\n                            //eslint-disable-next-line\n                            transaction.update(getTransferUserDocRef, { tokens: newTokens });\n                            console.log(\"user \"+getTransferUserDoc.id+\" transferred \"+newTokens+\" tokens\");\n                        });\n                    }).then(function() {\n                        console.log(\"Transfer user transaction successfully committed!\");\n                        //run transaction for transfer user\n                        router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                    }).catch(function(error) {\n                        console.log(\"Transaction failed: \", error);\n                    });\n                }).catch(function(error) {\n                    console.log(\"Transaction failed: \", error);\n                });\n            })\n            .catch(function(error) {\n              //eslint-disable-next-line no-console\n                console.error(\"Error adding document: \", error);\n            });\n           //RECYCLE transaction \n          } else if(typeof decodedString.count !=='undefined'){\n            //let recycleTime = new Date(decodedString.time);\n            // alert('Thanks for '+decodedString.count+' '+recycleTime.getDate()+' '+(recycleTime.getMonth()+1)+' '+recycleTime.getFullYear());\n            //eslint-disable-next-line\n            let getUserDocRef = db.collection('users').doc(this.$firebase.auth().currentUser.uid);\n            //add owner of transaction\n            decodedString.uid = this.$firebase.auth().currentUser.uid;\n            //calc rates\n            decodedString.tokens = this.$rate*decodedString.count;\n            decodedString.rate = this.$rate;\n            //calc bonuses\n            decodedString.bonus = this.$bonusRate*decodedString.count;\n            decodedString.bonusRate = this.$bonusRate;\n            db.collection(\"transactions\").add(decodedString)\n            .then(function(docRef) {\n               //eslint-disable-next-line no-console\n                console.log(\"Transaction written with ID: \", docRef.id);\n                      //run TRANSFER USER transaction\n                return db.runTransaction(function(transaction) {\n                    // This code may get re-run multiple times if there are conflicts.\n                    //eslint-disable-next-line\n                    return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                        if (!getUserDoc.exists) {\n                            throw \"Document does not exist!\";\n                        }\n                        var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                        var newBonus = getUserDoc.data().bonus + decodedString.bonus;\n                        //eslint-disable-next-line\n                        transaction.update(getUserDocRef, { tokens: newTokens, bonus: newBonus});\n                        console.log(\"user \"+getUserDoc.id+\" recycled for the amount of \"+newTokens+\" tokens\");\n                    });\n                }).then(function() {\n                    console.log(\"Recycling user transaction successfully committed!\");\n                    //run transaction for transfer user\n                    //eslint-disable-next-line\n                    router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                }).catch(function(error) {\n                    console.log(\"Transaction failed: \", error);\n                });\n            })\n            .catch(function(error) {\n              //eslint-disable-next-line no-console\n                console.error(\"Error adding document: \", error);\n            });\n          } else if(typeof decodedString.active !=='undefined'){\n            alert(decodedString);\n            db.collection('bin_users')\n            .where('datetime','==',decodedString.datetime)\n            .where('pending','==',true)\n            .where('binid','==',decodedString.binid)\n            .get().then(function(querySnapshot) {\n              if(querySnapshot.exists){\n                querySnapshot.forEach(function(doc) {\n                  db.collection('bin_users').doc(doc.id).update({'pending':false, 'active':true,'uid':ref.$firebase.auth().currentUser.uid});\n                  alert('active user is updated!');\n                });\n              } else {\n                alert(\"Error getting active doc\");\n              }\n            }).catch(function(error) {\n                alert(error);\n                console.log(\"Error getting active => \", error);\n            });\n          } else {\n            alert('QR error');\n          }\n        } else {\n          alert('QR error');\n        }\n      }\n    }\n  }\n};\n</script>\n"]}]}