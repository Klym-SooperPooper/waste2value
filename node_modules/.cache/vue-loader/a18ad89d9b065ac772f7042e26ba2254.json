{"remainingRequest":"D:\\beeko\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\beeko\\src\\components\\qr.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\beeko\\src\\components\\qr.vue","mtime":1584872811586},{"path":"D:\\beeko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\beeko\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\beeko\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\beeko\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1567240333000},{"path":"D:\\beeko\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\beeko\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["qr.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"qr.vue","sourceRoot":"src/components","sourcesContent":["/* eslint-disable */\n<template>\n  <v-container>\n    <v-layout\n      text-center\n      wrap\n    >\n      <v-flex xs12>\n        <v-img\n          :src=\"require('../assets/logo.png')\"\n          class=\"my-3\"\n          contain\n          height=\"60\"\n        ></v-img>\n      </v-flex>\n\n      <v-flex mb-4>\n        <div v-if=\"qrseen\">\n          <v-alert color=\"orange lighten-2\" style=\"padding-top:7px\"><v-icon>mdi-qrcode-scan</v-icon>Наведіть на екран на контейнері для автоматичного сканування</v-alert>\n          <qrcode-stream @decode=\"onDecode\" height=\"100\"></qrcode-stream>\n        </div>\n        <v-btn v-if=\"!qrseen\" v-on:click=\"qrseen = !qrseen\" x-large color=\"success\" dark>Сканувати QR-код</v-btn>\n        </v-flex>\n     </v-layout>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data: () => ({\n    qrseen:false\n  }),\n  mounted (){\n    /*var qr = this.$qrcode(0, 'H');\n    var transaction = {binid:1, count:1,  time:Date. now()};\n    var transfer = {fromid:1, tokens:1,  time:Date. now()};\n    transaction = JSON.stringify(transaction);\n    //eslint-disable-next-line no-console\n    console.log(transaction);\n    qr.addData(this.$encryptor.encrypt(JSON.stringify(transaction)));\n    qr.make();\n    document.getElementById('placeHolder').innerHTML = qr.createImgTag();*/\n  },\n  methods: {\n     IsJsonString(str) {\n        try {\n           //eslint-disable-next-line\n            console.log(str);\n            return JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n    },\n    onDecode (decodedString) {\n      if(decodedString){\n        //this.$router.push('Wallet')\n        //var decrypted = this.$encryptor.decrypt(decodedString);\n        //eslint-disable-next-line\n        decodedString = this.IsJsonString(decodedString);\n        \n        let router = this.$router;\n        let db = this.$store.state.db;\n        if(typeof decodedString === 'object'){\n          //TRANSFER\n          if(typeof decodedString.tokens !== 'undefined'){\n            //alert('Get your '+decodedString.tokens+' tokens from '+decodedString.fromid+' !');\n            //add owner of transaction\n            decodedString.uid = this.$firebase.auth().currentUser.uid;\n            //eslint-disable-next-line\n            let getUserDocRef = db.collection('users').doc(this.$firebase.auth().currentUser.uid);\n            //eslint-disable-next-line\n            let getTransferUserDocRef = db.collection('users').doc(decodedString.fromid.toString());\n            //make sure we get a number of tokens\n            decodedString.tokens = parseInt(decodedString.tokens);\n            db.collection(\"transactions\").add(decodedString)\n            .then(function(docRef) {\n               //eslint-disable-next-line no-console\n                console.log(\"Transaction written with ID: \", docRef.id);\n                \n                //run OWNER USER transaction\n                return db.runTransaction(function(transaction) {\n                    // This code may get re-run multiple times if there are conflicts.\n                    //eslint-disable-next-line\n                    return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                        if (!getUserDoc.exists) {\n                            throw \"Document does not exist!\";\n                        }\n                        var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                        //eslint-disable-next-line\n                        transaction.update(getUserDocRef, { tokens: newTokens });\n                        console.log(\"user \"+getUserDoc.id+\" got \"+newTokens+\" tokens\");\n                    });\n                }).then(function() {\n                    console.log(\"Get user transaction successfully committed!\");\n                     //run TRANSFER USER transaction\n                    return db.runTransaction(function(transaction) {\n                        // This code may get re-run multiple times if there are conflicts.\n                        //eslint-disable-next-line\n                        return transaction.get(getTransferUserDocRef).then(function(getTransferUserDoc) {\n                            if (!getTransferUserDoc.exists) {\n                                throw \"Document does not exist!\";\n                            }\n                            var newTokens = getTransferUserDoc.data().tokens - decodedString.tokens;\n                            //eslint-disable-next-line\n                            transaction.update(getTransferUserDocRef, { tokens: newTokens });\n                            console.log(\"user \"+getTransferUserDoc.id+\" transferred \"+newTokens+\" tokens\");\n                        });\n                    }).then(function() {\n                        console.log(\"Transfer user transaction successfully committed!\");\n                        //run transaction for transfer user\n                        router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                    }).catch(function(error) {\n                        console.log(\"Transaction failed: \", error);\n                    });\n                }).catch(function(error) {\n                    console.log(\"Transaction failed: \", error);\n                });\n            })\n            .catch(function(error) {\n              //eslint-disable-next-line no-console\n                console.error(\"Error adding document: \", error);\n            });\n           //RECYCLE transaction \n          } else if(typeof decodedString.count !=='undefined'){\n            //let recycleTime = new Date(decodedString.time);\n            // alert('Thanks for '+decodedString.count+' '+recycleTime.getDate()+' '+(recycleTime.getMonth()+1)+' '+recycleTime.getFullYear());\n            //eslint-disable-next-line\n            let getUserDocRef = db.collection('users').doc(this.$firebase.auth().currentUser.uid);\n            //add owner of transaction\n            decodedString.uid = this.$firebase.auth().currentUser.uid;\n            //calc rates\n            decodedString.tokens = this.$rate*decodedString.count;\n            decodedString.rate = this.$rate;\n            //calc bonuses\n            decodedString.bonus = this.$bonusRate*decodedString.count;\n            decodedString.bonusRate = this.$bonusRate;\n            db.collection(\"transactions\").add(decodedString)\n            .then(function(docRef) {\n               //eslint-disable-next-line no-console\n                console.log(\"Transaction written with ID: \", docRef.id);\n                      //run TRANSFER USER transaction\n                return db.runTransaction(function(transaction) {\n                    // This code may get re-run multiple times if there are conflicts.\n                    //eslint-disable-next-line\n                    return transaction.get(getUserDocRef).then(function(getUserDoc) {\n                        if (!getUserDoc.exists) {\n                            throw \"Document does not exist!\";\n                        }\n                        var newTokens = getUserDoc.data().tokens + decodedString.tokens;\n                        var newBonus = getUserDoc.data().bonus + decodedString.bonus;\n                        //eslint-disable-next-line\n                        transaction.update(getUserDocRef, { tokens: newTokens, bonus: newBonus});\n                        console.log(\"user \"+getUserDoc.id+\" recycled for the amount of \"+newTokens+\" tokens\");\n                    });\n                }).then(function() {\n                    console.log(\"Recycling user transaction successfully committed!\");\n                    //run transaction for transfer user\n                    //eslint-disable-next-line\n                    router.push({path:'wallet', name:'Wallet', params:{'transferred':decodedString.tokens}});\n                }).catch(function(error) {\n                    console.log(\"Transaction failed: \", error);\n                });\n            })\n            .catch(function(error) {\n              //eslint-disable-next-line no-console\n                console.error(\"Error adding document: \", error);\n            });\n          } else {\n            alert('QR error');\n          }\n        } else {\n          alert('QR error');\n        }\n      }\n    }\n  }\n};\n</script>\n"]}]}